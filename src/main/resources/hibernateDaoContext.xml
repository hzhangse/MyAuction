<?xml version="1.0" encoding="GBK"?>
<!-- 指定Spring配置文件的DTD信息 -->
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
	"http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
    <!-- 定义数据源Bean，使用C3P0数据源实现 -->
	<bean id="dataSource" destroy-method="close"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 指定连接数据库的驱动 -->
		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
		
		<!-- 指定连接JD数据库的URL
		<property name="jdbcUrl"
			value="jdbc:mysql://mysql.jae.jd.com:4066/81788090-26199299_my_c19z4r49"/>
		<property name="user" value="m2y2459t"/>
		<property name="password" value="Y987iZ214rgr"/>
		-->
		
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost:3306/auction"/>		
		<property name="user" value="root"/>		
		<property name="password" value="root"/>
		
		<!-- 指定连接数据库连接池的最大连接数 -->
		<property name="maxPoolSize" value="40"/>
		<!-- 指定连接数据库连接池的最小连接数 -->
		<property name="minPoolSize" value="1"/>
		<!-- 指定连接数据库连接池的初始化连接数 -->
		<property name="initialPoolSize" value="1"/>
		<!-- 指定连接数据库连接池的连接的最大空闲时间 -->
		<property name="maxIdleTime" value="20"/>
	</bean>

	<!-- 定义Hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 依赖注入数据源，注入上面定义的dataSource -->
		<property name="dataSource" ref="dataSource"/>
		<!-- mappingResouces属性用来列出全部映射文件 -->
		<property name="mappingResources">
			<list>
				<!-- 以下用来列出Hibernate映射文件 -->
				<value>com/train/auction/model/AuctionUser.hbm.xml</value>
				<value>com/train/auction/model/Bid.hbm.xml</value>
				<value>com/train/auction/model/Item.hbm.xml</value>
				<value>com/train/auction/model/Kind.hbm.xml</value>
				<value>com/train/auction/model/State.hbm.xml</value>
			</list>
		</property>
		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<props>
				<!-- 指定数据库方言 -->
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLInnoDBDialect</prop>
				<!-- 是否根据需要每次自动创建数据库 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- 显示Hibernate持久化操作所生成的SQL -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 将SQL脚本进行格式化后再输出 -->
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>
	
	
	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现-->
	<bean id="transactionManager" 
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<!-- 配置HibernateTransactionManager时需要依注入SessionFactory的引用 -->
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<!-- 配置事务切面Bean,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true"/>
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 配置一个切入点，匹配指定包下所有以Impl结尾的类执行的所有方法 -->
		<aop:pointcut id="leeService"
			expression="execution(* com.train.auction.service.impl.*Impl.*(..))"/>
		<!-- 指定在leeService切入点应用txAdvice事务切面 -->
		<aop:advisor advice-ref="txAdvice" 
			pointcut-ref="leeService"/>
	</aop:config>
	
	<!-- 配置daoTemplate，作为所有DAO组件的模板 -->
	<bean id="daoTemplate" abstract="true">
		<!-- 为DAO组件注入SessionFactory引用 -->
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 配置stateDao组件 -->
	<bean id="stateDao" parent="daoTemplate"
		class="com.train.auction.dao.impl.StateDaoHibernate"/>
	<!-- 配置kindDao组件 -->
	<bean id="kindDao" parent="daoTemplate"
		class="com.train.auction.dao.impl.KindDaoHibernate"/>
	<!-- 配置auctionDao组件 -->
	<bean id="auctionUserDao" parent="daoTemplate"
		class="com.train.auction.dao.impl.AuctionUserDaoHibernate"/>
	<!-- 配置bidDao组件 -->
	<bean id="bidDao" parent="daoTemplate"
		class="com.train.auction.dao.impl.BidDaoHibernate"/>
	<!-- 配置itemDao组件 -->
	<bean id="itemDao" parent="daoTemplate"
		class="com.train.auction.dao.impl.ItemDaoHibernate"/>
</beans>